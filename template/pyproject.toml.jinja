[build-system]
requires = {% include pathjoin('includes', 'build-system-requires.jinja') %}
build-backend = {% include pathjoin('includes', 'build-system-backend.jinja') %}

{% if package_manager == 'uv' and structure == 'poly' +%}
[tool.hatch.build]
dev-mode-dirs = ["components", "bases", "development", "."]

[tool.hatch.build.hooks.polylith-bricks]
# this section is needed to enable the hook in the build process, even if empty.
{% endif %}

[project]
name = "{{project_name}}"
version = "0.0.1"
description = "{{description}}"
authors = [{ name = "{{author_name}}", email = "{{author_email}}" }]
readme = "README.md"
{% if license %}
license = "{{ license }}"
{% endif %}
{% if package_manager != 'poetry' %}
requires-python = ">={{minimum_python_version}}{% if maximum_python_version %},<={{maximum_python_version}}{% endif %}"
{% endif %}
{% if package_manager != 'poetry' %}
dependencies = [
  # add your dependencies here
  {%+ if loguru %}"loguru>=0.7.2",{% endif +%}
]
{% endif %}

{% include pathjoin('includes', 'dev-dependency-section.jinja') %}

{% if commitizen %}
[tool.commitizen]
{% if cz_gitmoji %}name = "cz_gitmoji"{% endif +%}
version_provider = "pep621"
tag_format = "v$version"
bump_message = {% if cz_gitmoji %}"ðŸ”– bump(release): v$current_version â†’ v$new_version"{% else %}"bump version: $current_version â†’ $new_version"{% endif +%}
update_changelog_on_bump = true
annotated_tag = true
{% if package_manager == 'uv' %}pre_bump_hooks = ["uv lock --upgrade-package cz-conventional-gitmoji"]{% endif %}
{% endif %}

{% if ruff %}
[tool.ruff]
fix = true
target-version = "py{{minimum_python_version|replace('.','')}}"
{% if structure == 'poly' %}
src = ["bases", "components", "test"]
extend-exclude = ["development/*.py"]
{% elif structure == 'src' %}
src = ["src", "tests"]
{% endif %}

[tool.ruff.format]
line-ending = "lf"
indent-style = "space"

[tool.ruff.lint]
logger-objects = ["loguru"]
select = ["ALL"]
ignore = [
    # Missing docstring in public module
    "D100",
    # Missing docstring in `__init__`
    "D107",
    # Multi-line docstring summary should start at the first line
    "D212",
    # Class attribute `id` is shadowing a python builtin
    "A003",
    # Missing type annotation for `self` in method
    "ANN101",
    # Missing type annotation for `cls` in classmethod
    "ANN102",
    # Dynamically typed expressions (typing.Any) are disallowed in `*args`
    "ANN401",
    # Exception must not use a string literal, assign to variable first
    "EM101",
    # Missing authot in TODO
    "TD002",
    # Missing issue link on the line following this TODO
    "TD003",
    # Line contains TODO
    "FIX002",
    # Avoid specifying long messages outside the exception class
    "TRY003",
    # Move application import into a type-checking block
    "TCH001",
    # Move third-party import into a type-checking block
    "TCH002",
    # Move standard library import into a type-checking block
    "TCH003",
    # Invalid TODO tag
    "TD001",
    # Line contains FIXME, consider resolving the issue
    "FIX001",
    #############################################################################
    # Rules conflicting with `ruff format`
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    #############################################################################
    # Checks for indentation that uses tabs.
    "W191",
    # Checks for indentation with a non-multiple of 4 spaces.
    "E111",
    # Checks for indentation of comments with a non-multiple of 4 spaces.
    "E114",
    # Checks for over-indented code.
    "E117",
    # Line length violation
    "E501",
    # Checks for docstrings that are indented with tabs.
    "D206",
    # Checks for docstrings that use '''triple single quotes''' instead of """triple double quotes"""
    "D300",
    # Make sure that inline strings are quoted consistently.
    "Q000",
    # Make sure that multiline strings are quoted consistently.
    "Q001",
    # Make sure that docstrings are quoted consistently.
    "Q002",
    # Checks for strings that include escaped quotes
    "Q003",
    # Missing trailing comma
    # "COM812",
    # Prohibited trailing comma
    "COM819",
    # Single line implicit string concatenation
    "ISC001",
    # Multiline implicit string concatenation
    "ISC002",
]
unfixable = ["ERA001", "F401", "F841"]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    # The use of `datetime.datetime()` without `tzinfo` argument is not allowed
    "DTZ001",
    # positional boolean args
    "FBT001",
    # part of an implicit namespace package
    "INP001",
    # usage of `assert` in tests
    "S101",
    # magic value used in comarison
    "PLR2004",
    # private member accessed
    "SLF001",
]
"**/endpoints/*" = [
    # do not perform function call in default arguments
    "B008",
    # too many arguments in function definition
    "PLR0913",
]
"migrations/**/*.py" = [
    # part of implicit namespace package
    "INP001",
]
{% if structure == 'poly' %}
"development/**/*.py" = [
    # part of implicit namespace package
    "INP001",
]
{% endif %}
"scripts/**/*.py" = [
    # part of implicit namespace package
    "INP001",
]

[tool.ruff.lint.isort]
known-first-party = ["{{package_snake}}", {% if structure == 'poly' %}"test"{% else %}"tests"{% endif %}]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.validator"]
{% endif %}

{% if mypy %}
[tool.mypy]
{% if structure == 'poly' %}
mypy_path = ["components", "bases", "test"]
{% endif %}
namespace_packages = true
explicit_package_bases = true
junit_xml = "reports/mypy.xml"
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
ignore_missing_imports = true
pretty = false
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true
{% endif %}

{% if pytest %}
[tool.pytest.ini_options]
addopts = """--color=yes --doctest-modules --exitfirst --failed-first \
  --strict-markers --strict-config --verbosity=2 \
  --junitxml=reports/pytest.xml"""
filterwarnings = ["error"]
{% if structure == 'poly' %}
testpaths = ["bases", "components", "test"]
{% else %}
testpaths = ["tests"]
{% endif %}
{% endif %}

{% if coverage %}
[tool.coverage.report]
fail_under = 50
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.xml]
output = "reports/coverage.xml"
{% endif %}
